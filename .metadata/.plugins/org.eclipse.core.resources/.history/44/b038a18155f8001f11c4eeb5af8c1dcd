package com.example.demo.controllers;

import java.util.List;

import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.http.HttpStatus;
import org.springframework.http.ResponseEntity;
import org.springframework.web.bind.annotation.GetMapping;
import org.springframework.web.bind.annotation.PathVariable;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RestController;

import com.example.demo.entities.Assessment;
import com.example.demo.entities.Question;
import com.example.demo.service.AssessmentService;
import com.fasterxml.jackson.core.JsonProcessingException;
import com.fasterxml.jackson.databind.ObjectMapper;

import org.springframework.web.bind.annotation.PostMapping;
import org.springframework.web.bind.annotation.RequestBody;
import org.springframework.web.bind.annotation.RequestParam;



@RestController
@RequestMapping("/assessments")
public class AssessmentController {
	
	@Autowired
	AssessmentService as;
	
	@GetMapping("/")
	public List<Assessment> getAllAssessments(){
		return as.getAllAssessments();
	}
	
	@PostMapping("/assessment")
	public ResponseEntity<Assessment> createAssessment(@RequestBody Map<String, Object> payload) {
	    ObjectMapper objectMapper = new ObjectMapper();
	    Assessment assessment = new Assessment();
	    
	    // Convert JSON object to string for listedTestConfig
	    try {
	        String listedTestConfigString = objectMapper.writeValueAsString(payload.get("listedTestConfig"));
	        assessment.setListedTestConfig(listedTestConfigString);
	    } catch (JsonProcessingException e) {
	        return ResponseEntity.badRequest().build();
	    }

	    // Save to database (assuming assessmentService.save() exists)
	    return ResponseEntity.ok(as.addAssessment(assessment));
	}

	
	
	@GetMapping("/{id}")
    public ResponseEntity<Assessment> getAssessmentById(@PathVariable("id") int id) { 
        return as.getAssessmentById(id)
                .map(ResponseEntity::ok)
                .orElseGet(() -> ResponseEntity.notFound().build());
    }
	

}
